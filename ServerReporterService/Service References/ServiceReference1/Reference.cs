//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerReporterService.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDiskStatus", ReplyAction="http://tempuri.org/IService1/UpdateDiskStatusResponse")]
        void UpdateDiskStatus(ServerMonitor.Model.DiskInfo[] disksInfo, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDiskStatus", ReplyAction="http://tempuri.org/IService1/UpdateDiskStatusResponse")]
        System.Threading.Tasks.Task UpdateDiskStatusAsync(ServerMonitor.Model.DiskInfo[] disksInfo, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServerInfo", ReplyAction="http://tempuri.org/IService1/UpdateServerInfoResponse")]
        void UpdateServerInfo(ServerMonitor.Model.ServerInfo serverInfo, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServerInfo", ReplyAction="http://tempuri.org/IService1/UpdateServerInfoResponse")]
        System.Threading.Tasks.Task UpdateServerInfoAsync(ServerMonitor.Model.ServerInfo serverInfo, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePerformanceInfo", ReplyAction="http://tempuri.org/IService1/UpdatePerformanceInfoResponse")]
        void UpdatePerformanceInfo(ServerMonitor.Model.PerformanceInfo perfInfo, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePerformanceInfo", ReplyAction="http://tempuri.org/IService1/UpdatePerformanceInfoResponse")]
        System.Threading.Tasks.Task UpdatePerformanceInfoAsync(ServerMonitor.Model.PerformanceInfo perfInfo, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEventViewerStatus", ReplyAction="http://tempuri.org/IService1/UpdateEventViewerStatusResponse")]
        void UpdateEventViewerStatus(ServerMonitor.Model.EventViewerInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEventViewerStatus", ReplyAction="http://tempuri.org/IService1/UpdateEventViewerStatusResponse")]
        System.Threading.Tasks.Task UpdateEventViewerStatusAsync(ServerMonitor.Model.EventViewerInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUlsStatus", ReplyAction="http://tempuri.org/IService1/UpdateUlsStatusResponse")]
        void UpdateUlsStatus(ServerMonitor.Model.UlsViewerInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUlsStatus", ReplyAction="http://tempuri.org/IService1/UpdateUlsStatusResponse")]
        System.Threading.Tasks.Task UpdateUlsStatusAsync(ServerMonitor.Model.UlsViewerInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSqlPerfStatus", ReplyAction="http://tempuri.org/IService1/UpdateSqlPerfStatusResponse")]
        void UpdateSqlPerfStatus(ServerMonitor.Model.SqlPerformanceInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSqlPerfStatus", ReplyAction="http://tempuri.org/IService1/UpdateSqlPerfStatusResponse")]
        System.Threading.Tasks.Task UpdateSqlPerfStatusAsync(ServerMonitor.Model.SqlPerformanceInfo[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOtherServerParams", ReplyAction="http://tempuri.org/IService1/UpdateOtherServerParamsResponse")]
        void UpdateOtherServerParams(ServerMonitor.Model.ServerOtherParams[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOtherServerParams", ReplyAction="http://tempuri.org/IService1/UpdateOtherServerParamsResponse")]
        System.Threading.Tasks.Task UpdateOtherServerParamsAsync(ServerMonitor.Model.ServerOtherParams[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServerOtherParams", ReplyAction="http://tempuri.org/IService1/GetServerOtherParamsResponse")]
        ServerMonitor.Model.ServerOtherParams GetServerOtherParams(string title, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServerOtherParams", ReplyAction="http://tempuri.org/IService1/GetServerOtherParamsResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.ServerOtherParams> GetServerOtherParamsAsync(string title, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDisksStatus", ReplyAction="http://tempuri.org/IService1/GetDisksStatusResponse")]
        ServerMonitor.Model.DiskInfo[] GetDisksStatus(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDisksStatus", ReplyAction="http://tempuri.org/IService1/GetDisksStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.DiskInfo[]> GetDisksStatusAsync(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServerName", ReplyAction="http://tempuri.org/IService1/GetServerNameResponse")]
        ServerMonitor.Model.ServerInfo GetServerName(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServerName", ReplyAction="http://tempuri.org/IService1/GetServerNameResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo> GetServerNameAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSqlPerformanceStatus", ReplyAction="http://tempuri.org/IService1/GetSqlPerformanceStatusResponse")]
        ServerMonitor.Model.SqlPerformanceInfo[] GetSqlPerformanceStatus(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSqlPerformanceStatus", ReplyAction="http://tempuri.org/IService1/GetSqlPerformanceStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.SqlPerformanceInfo[]> GetSqlPerformanceStatusAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerformanceStatus", ReplyAction="http://tempuri.org/IService1/GetPerformanceStatusResponse")]
        ServerMonitor.Model.PerformanceInfo[] GetPerformanceStatus(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerformanceStatus", ReplyAction="http://tempuri.org/IService1/GetPerformanceStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.PerformanceInfo[]> GetPerformanceStatusAsync(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventViewerStatus", ReplyAction="http://tempuri.org/IService1/GetEventViewerStatusResponse")]
        ServerMonitor.Model.EventViewerInfo[] GetEventViewerStatus(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventViewerStatus", ReplyAction="http://tempuri.org/IService1/GetEventViewerStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.EventViewerInfo[]> GetEventViewerStatusAsync(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUlsViewerStatus", ReplyAction="http://tempuri.org/IService1/GetUlsViewerStatusResponse")]
        ServerMonitor.Model.UlsViewerInfo[] GetUlsViewerStatus(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUlsViewerStatus", ReplyAction="http://tempuri.org/IService1/GetUlsViewerStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.UlsViewerInfo[]> GetUlsViewerStatusAsync(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServers", ReplyAction="http://tempuri.org/IService1/GetServersResponse")]
        ServerMonitor.Model.ServerInfo[] GetServers(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServers", ReplyAction="http://tempuri.org/IService1/GetServersResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo[]> GetServersAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroups", ReplyAction="http://tempuri.org/IService1/GetGroupsResponse")]
        ServerMonitor.Model.GroupInfo[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroups", ReplyAction="http://tempuri.org/IService1/GetGroupsResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.GroupInfo[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUnasignedGroup", ReplyAction="http://tempuri.org/IService1/InsertUnasignedGroupResponse")]
        void InsertUnasignedGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUnasignedGroup", ReplyAction="http://tempuri.org/IService1/InsertUnasignedGroupResponse")]
        System.Threading.Tasks.Task InsertUnasignedGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGroup", ReplyAction="http://tempuri.org/IService1/InsertGroupResponse")]
        void InsertGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGroup", ReplyAction="http://tempuri.org/IService1/InsertGroupResponse")]
        System.Threading.Tasks.Task InsertGroupAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGroup", ReplyAction="http://tempuri.org/IService1/DeleteGroupResponse")]
        void DeleteGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGroup", ReplyAction="http://tempuri.org/IService1/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServicesConfig", ReplyAction="http://tempuri.org/IService1/UpdateServicesConfigResponse")]
        void UpdateServicesConfig(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServicesConfig", ReplyAction="http://tempuri.org/IService1/UpdateServicesConfigResponse")]
        System.Threading.Tasks.Task UpdateServicesConfigAsync(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServicesConfig", ReplyAction="http://tempuri.org/IService1/GetServicesConfigResponse")]
        string GetServicesConfig(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServicesConfig", ReplyAction="http://tempuri.org/IService1/GetServicesConfigResponse")]
        System.Threading.Tasks.Task<string> GetServicesConfigAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAppPoolsConfig", ReplyAction="http://tempuri.org/IService1/UpdateAppPoolsConfigResponse")]
        void UpdateAppPoolsConfig(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAppPoolsConfig", ReplyAction="http://tempuri.org/IService1/UpdateAppPoolsConfigResponse")]
        System.Threading.Tasks.Task UpdateAppPoolsConfigAsync(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppPoolsConfig", ReplyAction="http://tempuri.org/IService1/GetAppPoolsConfigResponse")]
        string GetAppPoolsConfig(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppPoolsConfig", ReplyAction="http://tempuri.org/IService1/GetAppPoolsConfigResponse")]
        System.Threading.Tasks.Task<string> GetAppPoolsConfigAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUrlConfig", ReplyAction="http://tempuri.org/IService1/UpdateUrlConfigResponse")]
        void UpdateUrlConfig(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUrlConfig", ReplyAction="http://tempuri.org/IService1/UpdateUrlConfigResponse")]
        System.Threading.Tasks.Task UpdateUrlConfigAsync(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUrlConfig", ReplyAction="http://tempuri.org/IService1/GetUrlConfigResponse")]
        string GetUrlConfig(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUrlConfig", ReplyAction="http://tempuri.org/IService1/GetUrlConfigResponse")]
        System.Threading.Tasks.Task<string> GetUrlConfigAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMailAdressesConfig", ReplyAction="http://tempuri.org/IService1/GetMailAdressesConfigResponse")]
        string GetMailAdressesConfig(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMailAdressesConfig", ReplyAction="http://tempuri.org/IService1/GetMailAdressesConfigResponse")]
        System.Threading.Tasks.Task<string> GetMailAdressesConfigAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMailAdressesConfig", ReplyAction="http://tempuri.org/IService1/UpdateMailAdressesConfigResponse")]
        void UpdateMailAdressesConfig(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMailAdressesConfig", ReplyAction="http://tempuri.org/IService1/UpdateMailAdressesConfigResponse")]
        System.Threading.Tasks.Task UpdateMailAdressesConfigAsync(string config, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServerGroup", ReplyAction="http://tempuri.org/IService1/UpdateServerGroupResponse")]
        void UpdateServerGroup(string serverId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateServerGroup", ReplyAction="http://tempuri.org/IService1/UpdateServerGroupResponse")]
        System.Threading.Tasks.Task UpdateServerGroupAsync(string serverId, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllServers", ReplyAction="http://tempuri.org/IService1/GetAllServersResponse")]
        ServerMonitor.Model.ServerInfo[] GetAllServers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllServers", ReplyAction="http://tempuri.org/IService1/GetAllServersResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo[]> GetAllServersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHttpServicesStatus", ReplyAction="http://tempuri.org/IService1/UpdateHttpServicesStatusResponse")]
        void UpdateHttpServicesStatus(ServerMonitor.Model.HttpServicesValue[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHttpServicesStatus", ReplyAction="http://tempuri.org/IService1/UpdateHttpServicesStatusResponse")]
        System.Threading.Tasks.Task UpdateHttpServicesStatusAsync(ServerMonitor.Model.HttpServicesValue[] infos, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHttpServicesStatus", ReplyAction="http://tempuri.org/IService1/GetHttpServicesStatusResponse")]
        ServerMonitor.Model.HttpServicesValue[] GetHttpServicesStatus(string id, int min);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHttpServicesStatus", ReplyAction="http://tempuri.org/IService1/GetHttpServicesStatusResponse")]
        System.Threading.Tasks.Task<ServerMonitor.Model.HttpServicesValue[]> GetHttpServicesStatusAsync(string id, int min);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ServerReporterService.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ServerReporterService.ServiceReference1.IService1>, ServerReporterService.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UpdateDiskStatus(ServerMonitor.Model.DiskInfo[] disksInfo, System.Guid id) {
            base.Channel.UpdateDiskStatus(disksInfo, id);
        }
        
        public System.Threading.Tasks.Task UpdateDiskStatusAsync(ServerMonitor.Model.DiskInfo[] disksInfo, System.Guid id) {
            return base.Channel.UpdateDiskStatusAsync(disksInfo, id);
        }
        
        public void UpdateServerInfo(ServerMonitor.Model.ServerInfo serverInfo, string group) {
            base.Channel.UpdateServerInfo(serverInfo, group);
        }
        
        public System.Threading.Tasks.Task UpdateServerInfoAsync(ServerMonitor.Model.ServerInfo serverInfo, string group) {
            return base.Channel.UpdateServerInfoAsync(serverInfo, group);
        }
        
        public void UpdatePerformanceInfo(ServerMonitor.Model.PerformanceInfo perfInfo, System.Guid id) {
            base.Channel.UpdatePerformanceInfo(perfInfo, id);
        }
        
        public System.Threading.Tasks.Task UpdatePerformanceInfoAsync(ServerMonitor.Model.PerformanceInfo perfInfo, System.Guid id) {
            return base.Channel.UpdatePerformanceInfoAsync(perfInfo, id);
        }
        
        public void UpdateEventViewerStatus(ServerMonitor.Model.EventViewerInfo[] infos, System.Guid id) {
            base.Channel.UpdateEventViewerStatus(infos, id);
        }
        
        public System.Threading.Tasks.Task UpdateEventViewerStatusAsync(ServerMonitor.Model.EventViewerInfo[] infos, System.Guid id) {
            return base.Channel.UpdateEventViewerStatusAsync(infos, id);
        }
        
        public void UpdateUlsStatus(ServerMonitor.Model.UlsViewerInfo[] infos, System.Guid id) {
            base.Channel.UpdateUlsStatus(infos, id);
        }
        
        public System.Threading.Tasks.Task UpdateUlsStatusAsync(ServerMonitor.Model.UlsViewerInfo[] infos, System.Guid id) {
            return base.Channel.UpdateUlsStatusAsync(infos, id);
        }
        
        public void UpdateSqlPerfStatus(ServerMonitor.Model.SqlPerformanceInfo[] infos, System.Guid id) {
            base.Channel.UpdateSqlPerfStatus(infos, id);
        }
        
        public System.Threading.Tasks.Task UpdateSqlPerfStatusAsync(ServerMonitor.Model.SqlPerformanceInfo[] infos, System.Guid id) {
            return base.Channel.UpdateSqlPerfStatusAsync(infos, id);
        }
        
        public void UpdateOtherServerParams(ServerMonitor.Model.ServerOtherParams[] infos, System.Guid id) {
            base.Channel.UpdateOtherServerParams(infos, id);
        }
        
        public System.Threading.Tasks.Task UpdateOtherServerParamsAsync(ServerMonitor.Model.ServerOtherParams[] infos, System.Guid id) {
            return base.Channel.UpdateOtherServerParamsAsync(infos, id);
        }
        
        public ServerMonitor.Model.ServerOtherParams GetServerOtherParams(string title, string id) {
            return base.Channel.GetServerOtherParams(title, id);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.ServerOtherParams> GetServerOtherParamsAsync(string title, string id) {
            return base.Channel.GetServerOtherParamsAsync(title, id);
        }
        
        public ServerMonitor.Model.DiskInfo[] GetDisksStatus(string id, int min) {
            return base.Channel.GetDisksStatus(id, min);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.DiskInfo[]> GetDisksStatusAsync(string id, int min) {
            return base.Channel.GetDisksStatusAsync(id, min);
        }
        
        public ServerMonitor.Model.ServerInfo GetServerName(string id) {
            return base.Channel.GetServerName(id);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo> GetServerNameAsync(string id) {
            return base.Channel.GetServerNameAsync(id);
        }
        
        public ServerMonitor.Model.SqlPerformanceInfo[] GetSqlPerformanceStatus(string id) {
            return base.Channel.GetSqlPerformanceStatus(id);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.SqlPerformanceInfo[]> GetSqlPerformanceStatusAsync(string id) {
            return base.Channel.GetSqlPerformanceStatusAsync(id);
        }
        
        public ServerMonitor.Model.PerformanceInfo[] GetPerformanceStatus(string id, int min) {
            return base.Channel.GetPerformanceStatus(id, min);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.PerformanceInfo[]> GetPerformanceStatusAsync(string id, int min) {
            return base.Channel.GetPerformanceStatusAsync(id, min);
        }
        
        public ServerMonitor.Model.EventViewerInfo[] GetEventViewerStatus(string id, int min) {
            return base.Channel.GetEventViewerStatus(id, min);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.EventViewerInfo[]> GetEventViewerStatusAsync(string id, int min) {
            return base.Channel.GetEventViewerStatusAsync(id, min);
        }
        
        public ServerMonitor.Model.UlsViewerInfo[] GetUlsViewerStatus(string id, int min) {
            return base.Channel.GetUlsViewerStatus(id, min);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.UlsViewerInfo[]> GetUlsViewerStatusAsync(string id, int min) {
            return base.Channel.GetUlsViewerStatusAsync(id, min);
        }
        
        public ServerMonitor.Model.ServerInfo[] GetServers(string id) {
            return base.Channel.GetServers(id);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo[]> GetServersAsync(string id) {
            return base.Channel.GetServersAsync(id);
        }
        
        public ServerMonitor.Model.GroupInfo[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.GroupInfo[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public void InsertUnasignedGroup() {
            base.Channel.InsertUnasignedGroup();
        }
        
        public System.Threading.Tasks.Task InsertUnasignedGroupAsync() {
            return base.Channel.InsertUnasignedGroupAsync();
        }
        
        public void InsertGroup(string name) {
            base.Channel.InsertGroup(name);
        }
        
        public System.Threading.Tasks.Task InsertGroupAsync(string name) {
            return base.Channel.InsertGroupAsync(name);
        }
        
        public void DeleteGroup(string name) {
            base.Channel.DeleteGroup(name);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(string name) {
            return base.Channel.DeleteGroupAsync(name);
        }
        
        public void UpdateServicesConfig(string config, string id) {
            base.Channel.UpdateServicesConfig(config, id);
        }
        
        public System.Threading.Tasks.Task UpdateServicesConfigAsync(string config, string id) {
            return base.Channel.UpdateServicesConfigAsync(config, id);
        }
        
        public string GetServicesConfig(string id) {
            return base.Channel.GetServicesConfig(id);
        }
        
        public System.Threading.Tasks.Task<string> GetServicesConfigAsync(string id) {
            return base.Channel.GetServicesConfigAsync(id);
        }
        
        public void UpdateAppPoolsConfig(string config, string id) {
            base.Channel.UpdateAppPoolsConfig(config, id);
        }
        
        public System.Threading.Tasks.Task UpdateAppPoolsConfigAsync(string config, string id) {
            return base.Channel.UpdateAppPoolsConfigAsync(config, id);
        }
        
        public string GetAppPoolsConfig(string id) {
            return base.Channel.GetAppPoolsConfig(id);
        }
        
        public System.Threading.Tasks.Task<string> GetAppPoolsConfigAsync(string id) {
            return base.Channel.GetAppPoolsConfigAsync(id);
        }
        
        public void UpdateUrlConfig(string config, string id) {
            base.Channel.UpdateUrlConfig(config, id);
        }
        
        public System.Threading.Tasks.Task UpdateUrlConfigAsync(string config, string id) {
            return base.Channel.UpdateUrlConfigAsync(config, id);
        }
        
        public string GetUrlConfig(string id) {
            return base.Channel.GetUrlConfig(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUrlConfigAsync(string id) {
            return base.Channel.GetUrlConfigAsync(id);
        }
        
        public string GetMailAdressesConfig(string id) {
            return base.Channel.GetMailAdressesConfig(id);
        }
        
        public System.Threading.Tasks.Task<string> GetMailAdressesConfigAsync(string id) {
            return base.Channel.GetMailAdressesConfigAsync(id);
        }
        
        public void UpdateMailAdressesConfig(string config, string id) {
            base.Channel.UpdateMailAdressesConfig(config, id);
        }
        
        public System.Threading.Tasks.Task UpdateMailAdressesConfigAsync(string config, string id) {
            return base.Channel.UpdateMailAdressesConfigAsync(config, id);
        }
        
        public void UpdateServerGroup(string serverId, string groupId) {
            base.Channel.UpdateServerGroup(serverId, groupId);
        }
        
        public System.Threading.Tasks.Task UpdateServerGroupAsync(string serverId, string groupId) {
            return base.Channel.UpdateServerGroupAsync(serverId, groupId);
        }
        
        public ServerMonitor.Model.ServerInfo[] GetAllServers() {
            return base.Channel.GetAllServers();
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.ServerInfo[]> GetAllServersAsync() {
            return base.Channel.GetAllServersAsync();
        }
        
        public void UpdateHttpServicesStatus(ServerMonitor.Model.HttpServicesValue[] infos, System.Guid id) {
            base.Channel.UpdateHttpServicesStatus(infos, id);
        }
        
        public System.Threading.Tasks.Task UpdateHttpServicesStatusAsync(ServerMonitor.Model.HttpServicesValue[] infos, System.Guid id) {
            return base.Channel.UpdateHttpServicesStatusAsync(infos, id);
        }
        
        public ServerMonitor.Model.HttpServicesValue[] GetHttpServicesStatus(string id, int min) {
            return base.Channel.GetHttpServicesStatus(id, min);
        }
        
        public System.Threading.Tasks.Task<ServerMonitor.Model.HttpServicesValue[]> GetHttpServicesStatusAsync(string id, int min) {
            return base.Channel.GetHttpServicesStatusAsync(id, min);
        }
    }
}
